{"version":3,"sources":["Markers.tsx","data/overlayMaps.ts","data/markers/villages.ts","data/markers/towns.ts","data/markers/cities.ts","data/markers/locations.ts","App.tsx","serviceWorker.js","index.js"],"names":["VillageMarker","Component","props","propsWithIcon","icon","Leaflet","iconUrl","iconSize","iconAnchor","popupAnchor","tooltipAnchor","Marker","children","name","markers","lat","lng","tooltip","component","App","config","MarkerComponent","LayersControl","Overlay","LayerGroup","map","marker","position","Tooltip","direction","className","Map","center","maxBounds","maxBoundsViscosity","zoom","TileLayer","url","tileSize","maxZoom","overlayMaps","this","createLayerGroup","Polygon","positions","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4c746694.chunk.js","sourcesContent":["import React, { Component, createRef } from 'react';\nimport { Marker, MarkerProps } from 'react-leaflet';\nimport Leaflet, { LatLng } from 'leaflet';\nimport { copyToClipboard } from './copyToClipboard';\n\nexport class CopyPositionMarker extends Component {\n  ref: any = createRef();\n\n  icon = Leaflet.icon({\n    iconUrl: 'images/map-pin.png',\n    iconSize: [30, 30],\n    iconAnchor: [15, 30],\n  });\n\n\n  copyPositionToClipboard(position: LatLng) {\n    copyToClipboard(`lat: ${position.lat},\\nlng: ${position.lng},`)\n  }\n  \n  render() {\n    return <Marker icon={this.icon} ref={this.ref} position={[0, 0]} ondragend={() => { this.copyPositionToClipboard(this.ref.current.leafletElement.getLatLng()) }} draggable></Marker>\n    ;\n  }\n}\n\nexport const VillageMarker = (props: MarkerProps) => {\n  const propsWithIcon = {\n    ...props,\n    icon: Leaflet.icon({\n      iconUrl: 'images/hut.png',\n      iconSize: [25, 25],\n      iconAnchor: [12.5, 25],\n      popupAnchor: [0, -25],\n      tooltipAnchor: [0, -25],\n    }),\n  };\n\n  return <Marker {...propsWithIcon}>{props.children}</Marker>;\n}\n\nexport const TownMarker = (props: MarkerProps) => {\n  const propsWithIcon = {\n    ...props,\n    icon: Leaflet.icon({\n      iconUrl: 'images/town.png',\n      iconSize: [30, 30],\n      iconAnchor: [15, 30],\n      popupAnchor: [0, -25],\n      tooltipAnchor: [0, -25],\n    }),\n  };\n\n  return <Marker {...propsWithIcon}>{props.children}</Marker>;\n}\n\nexport const CityMarker = (props: MarkerProps) => {\n  const propsWithIcon = {\n    ...props,\n    icon: Leaflet.icon({\n      iconUrl: 'images/city.png',\n      iconSize: [35, 35],\n      iconAnchor: [17.5, 35],\n      popupAnchor: [0, -32],\n      tooltipAnchor: [0, -32],\n    }),\n  };\n\n  return <Marker {...propsWithIcon}>{props.children}</Marker>;\n}\n\nexport const ObeliskMarker = (props: MarkerProps) => {\n  const propsWithIcon = {\n    ...props,\n    icon: Leaflet.icon({\n      iconUrl: 'images/obelisk.png',\n      iconSize: [30, 30],\n      iconAnchor: [15, 30],\n      popupAnchor: [0, -25],\n      tooltipAnchor: [0, -25],\n    }),\n  };\n\n  return <Marker {...propsWithIcon}>{props.children}</Marker>;\n}","import { VillageMarker, TownMarker, CityMarker, ObeliskMarker } from './../Markers';\nimport cities from './markers/cities';\nimport locations from './markers/locations';\nimport towns from './markers/towns';\nimport villages from './markers/villages';\n\nexport default [\n  {\n    name: 'Villages',\n    markers: villages,\n    component: VillageMarker,\n  },\n  {\n    name: 'Towns',\n    markers: towns,\n    component: TownMarker,\n  },\n  {\n    name: 'Cities',\n    markers: cities,\n    component: CityMarker,\n  },\n  {\n    name: 'Locations',\n    markers: locations,\n    component: ObeliskMarker,\n  },\n]","export default [\n  {\n    lat: -13.581920900545844,\n    lng: -115.13671875,\n    tooltip: 'Wittford'\n  },\n  {\n    lat: -0.7031073524364783,\n    lng: -119.70703125000001,\n    tooltip: 'Nirndal'\n  },\n]","export default [\n  {\n    lat: 14.689881366618774,\n    lng: -121.06933593750001,\n    tooltip: 'Rainrock'\n  },\n]","export default [\n  {\n    lat: -27.059125784374054,\n    lng: -140.27343750000003,\n    tooltip: 'Ruhmar'\n  },\n]","export default [\n  {\n    lat: 62.40397035883749,\n    lng: 75.64550399780275,\n    tooltip: 'Mossy Scar'\n  },\n]","import React, { Component } from 'react';\nimport './App.css';\nimport { LayerGroup, Map, TileLayer, LayersControl, Tooltip, Polygon } from 'react-leaflet';\nimport overlayMaps from './data/overlayMaps';\nimport 'leaflet/dist/leaflet.css';\nimport { VillageMarker, CopyPositionMarker }  from './Markers';\n\nclass App extends Component {\n  createLayerGroup(config: any) {\n    const MarkerComponent = config.component || VillageMarker;\n    return (\n      <LayersControl.Overlay name={config.name}>\n        <LayerGroup>\n          {config.markers.map((marker: any) => <MarkerComponent position={[marker.lat, marker.lng]}><Tooltip direction='top'>{marker.tooltip}</Tooltip></MarkerComponent>)}\n        </LayerGroup>\n      </LayersControl.Overlay>\n    )\n  }\n\n  render(): any {\n    return <div className=\"App\">\n      <Map className=\"Map\" center={[0, 0]} maxBounds={[[85, -180], [-85, 180]]} maxBoundsViscosity={.8} zoom={2}>\n        <TileLayer\n          url=\"./images/map/{z}/{x}/{y}.png\"\n          tileSize={256}\n          maxZoom={5}\n        />\n        <LayersControl position=\"bottomright\">\n          {overlayMaps.map(this.createLayerGroup)}\n        </LayersControl>\n        <Polygon positions={[\n          [0,0],\n          [20,20]\n        ]}></Polygon>\n\n        {/* <CopyPositionMarker></CopyPositionMarker> */}\n      </Map>\n    </div>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}